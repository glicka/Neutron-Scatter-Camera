Source code (Qt project) for a parsing widget for SIS data. Program input is a
binary .dat file in the SIS format (i.e. produced by SIS acquisition software).
Output is an HDF5 with the parsed data.

The parsing here is CCI2 specific. The project is based on the qt5.1 parser
originally authored by crbates.

Output data structure:
  /EventData - HDF5 table with numEvents number of rows and 7 columns. Column
               descriptions are as follows:
  1) timestamp - 64-bit uint
  2) ADC_value - 32-bit float (either ADC_value or calibrated energy value
                               depending on whether calibration option is 
                               checked during parsing)
  3) detector - 16-bit uint (channel from which data was read out. Starts from
			    0. If you have 2 8-channel SIS3302 cards, channels
			    0-7 will correspond to channels 1-8 on the first
			    card, and 8-15 to channels 1-8 on the second card)
  4) trigger - 16-bit uint (Trigger value associated with the pulse readout.
			   0 = externally triggered (nearest neighbor)
			   1 = triggered pulse (fast filter threshold)
			   >1 = triggered multiple times by the same pulse - 
			        corresponds to pileup
  5) pileup - 16-bit uint (Boolean value. 1 here indicates trigger value is >1 
			  [i.e. this is redundant information] )
  6) retrigger - 16-bit uint (Boolean value. Similar to pileup)
  7) rid - 32-bit uint (Pointer to the corresponding row in the RawData that
                        contains the associated raw signal. This is used because
                        sorting the raw data is very time intensive, so if 
                        sorting is required (e.g. for event reconstruction), 
                        sort only the EventData and refer to the rid pointer to
                        access the associated raw signals.

  /RawData - HDF5 CArray (2D). Has has dimensions numEvents x rawSignalSize, 
             i.e. the number of rows is equal to the number of readouts in the
             saved data, while the number of columns is equal to the number of
             samples saved per digital signal readout (e.g. rawSignalSize = 256
             corresponds to saving 256 10-ns samples).

Dependencies
- Qt libraries are required to build the project.
  On debian systems, these can be installed via the command:

  sudo apt-get install qt-sdk

- The only non-standard C++ libraries the parser depends on are the HDF5 libs.
  On debian systems, these can be installed via the command:

  sudo apt-get install libhdf5-serial-dev

  After installing the HDF5 libraries, you may need to update the project file
  (source/binaryreader.pro) to add the location of the HDF5 headers to your
  include path (for example: INCLUDEPATH += /usr/include - location may be 
  different on different systems).
